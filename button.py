import sys
from PyQt4 import QtGui, QtCore
import numpy as np
import subprocess
from lxml import etree
import os
import time
from menu_layouts import *
from xbox_controller import *
import pwd
import platform
import pyamixer

class button_more(QtGui.QPushButton):
	#this is for the left and right bumper buttons in radial when there are too many files to show all at once
	def __init__(self,direction,parent,group):
		self.direction=direction
		if self.direction==-1:
			self.name='more left'
		else:
			self.name='more right'
		QtGui.QPushButton.__init__(self,'',parent) #innitialize button
		self.group=group
		self.parent=parent
		self.clicked.connect(self.act)
		btn_size=int(self.group.settings['Button Size'])
		if self.direction==-1:
			self.setIcon(QtGui.QIcon.fromTheme('go-previous'))
		else:
			self.setIcon(QtGui.QIcon.fromTheme('go-next'))
		self.setStyleSheet("QPushButton {color: black; border: none}")
		self.setIconSize(QtCore.QSize(btn_size,btn_size))
		self.resize(self.sizeHint())
	def act(self):
		btn_set=(self.group.btn_set+self.direction)%self.group.num_sets
		self.group.change_menu(self.group.current_node,btn_set)
class button(QtGui.QPushButton):
	#this class creates and assigns action to buttons
	#this is specifically for radial buttons generated by xml nodes
	def __init__(self,xml_node,parent,group):
		self.node=xml_node
		QtGui.QPushButton.__init__(self,self.node.attrib['name'],parent) #innitialize button
		self.group=group #this says it belongs to the class radial menu, but not as a child
		self.parent=parent #parent is the main ui
		self.clicked.connect(self.act)
		font=QtGui.QFont()
		self.setMouseTracking(True)
		try: #check to see if the button is a font setting button, if so, change the font of this button
			if self.node.attrib['subtype']=="font":
				font.setFamily(self.node.attrib['value'])
				self.node.attrib['tool_tip']=self.node.attrib['name']
				self.setText('ABC\nxyz')
			else:
				pass
		except: 
			font.setFamily(self.group.settings['Font'])
		parent_node=self.node.getparent()
		try: #make sure that this isn't the top level button
			parent_name=parent_node.attrib['name']
		except:
			parent_name=None
		if parent_name=="Button Size": # check to see  if this is a button size option
			btn_size=int(self.node.attrib['value'])
		else:
			btn_size=int(self.group.settings['Button Size'])
		font.setPointSize(btn_size/2)
		self.setFont(font)
		if self.node.attrib['icon']!="none":
			self.setStyleSheet("QPushButton {color: black; border: none}")
			if self.node.attrib['icon']=='thumbnail':
				self.setIcon(QtGui.QIcon.fromTheme('image-loading'))
				#send myself to group to get thumbnailed!
				self.group.to_thumbnail.append(self)
				
			else:
				self.setIcon(QtGui.QIcon.fromTheme(self.node.attrib['icon'],QtGui.QIcon.fromTheme("applications-other")))
			self.setIconSize(QtCore.QSize(btn_size,btn_size))
			self.resize(self.sizeHint())
			self.setText("")
		else:
			self.setStyleSheet("QPushButton {color: black}")
			self.resize(self.sizeHint())
		# define self.action
		btn_type=self.node.attrib['type']
		if btn_type=='exit':
			self.action=action_exit(self)
		elif btn_type=='leave':
			self.action=action_leave(self)
		elif btn_type=='status':
			self.action=action_status(self)
		elif btn_type=='search':
			self.action=action_search(self)
		elif btn_type=='directory':
			self.action=action_directory(self)
		elif btn_type=='file':
			self.action=action_file(self)
		elif btn_type=='desktop':
			self.action=action_desktop(self)
		elif btn_type=='menu':
			self.action=action_menu(self)
		elif btn_type=='application':
			self.action=action_application(self)
		elif btn_type=='setting':
			self.action=action_setting(self)
		elif btn_type=='a_r_favorites':
			self.action=action_a_r_favorites(self)
		elif btn_type=='running_app':
			self.action=action_running_app(self)
		elif btn_type=='running_apps':
			self.action=action_running_apps(self)
		elif btn_type=='close_running_app':
			self.action=action_close_running_app(self)
		elif btn_type=='set_controller_scheme':
			self.action=action_set_controller_scheme(self)
		elif btn_type=='xbox_layout':
			self.action=action_configure_controller(self)
		else:
			self.action=action_undefined_action(self)
	#actions
	def act(self):
		print("a on " + self.node.attrib['name'])
		self.action.act_a()
	def act_x(self):
		print("x on " + self.node.attrib['name'])
		self.action.act_x()
	##### this is for handling hovers #####
	def enterEvent(self,event):
		self.hovered(1)
	def leaveEvent(self,event):
		self.hovered(0)
	def hovered(self,is_hovered):
		if is_hovered==1:
			if self.node.attrib['icon']!="none":
				self.setStyleSheet("QPushButton {color: gray; border: none}") 
				self.setText(self.node.attrib['name'])
			else:
				self.setStyleSheet("QPushButton {color: gray}")
			try: 
				if self.node.attrib['subtype']=='font':
					font=self.node.attrib['value']
				else:
					font=None
			except:
				font = None
			try:
				self.group.set_lower_label(self.node.attrib['tool_tip'],font)
				#self.group.set_lower_label(self.node.attrib['icon'],font)
			except(KeyError):
				self.group.set_lower_label('')
			except(AttributeError):
				pass
		else:
			if self.node.attrib['icon']!="none":
				self.setStyleSheet("QPushButton {color: black; border: none}")
				self.setText("")
			else:
				self.setStyleSheet("QPushButton {color: black}")
	def get_thumbnail(self):
		file_name=self.node.attrib['dir']
		return(file_name)

class action_configure_controller():
	def __init__(self,btn):
		self.name='configure_controller'
		self.node=btn.node
		self.group=btn.group
		self.parent=btn.parent
	def act_a(self):
		root = self.parent.layouts.tree.find('.//button[@name="Cancel Logout"]')
		self.parent.configure_controller_mode()
	def act_x(self):
		print("undefined action")
class action_exit():
	def __init__(self,btn):
		self.name='exit'
		self.node=btn.node
		self.group=btn.group
		self.parent=btn.parent
	def act_a(self):
		root = self.parent.layouts.tree.find('.//button[@name="Cancel Logout"]')
		self.group.change_menu(root)
	def act_x(self):
		print("undefined action")
class action_leave():
	def __init__(self,btn):
		self.name='leave'
		self.node=btn.node
		self.group=btn.group
		self.parent=btn.parent
	def act_a(self):
		if self.node.attrib['subtype']=="cancel_logout":
			self.group.change_menu()
		else:
			self.parent.leave(self.node.attrib['subtype'])
	def act_x(self):
		print("undefined action")
class action_status():
	def __init__(self,btn):
		self.name='status'
		self.node=btn.node
		self.group=btn.group
		self.parent=btn.parent		
	def act_a(self):
		self.parent.status_mode()
	def act_x(self):
		print("undefined action")
class action_search():
	def __init__(self,btn):
		self.name='search'
		self.node=btn.node
		self.group=btn.group
		self.parent=btn.parent		
	def act_a(self):		
		self.parent.search_mode()
	def act_x(self):
		print("undefined action")
class action_directory():
	def __init__(self,btn):
		self.name='directory'
		self.node=btn.node
		self.group=btn.group
		self.parent=btn.parent		
	def act_a(self):
		print(self.node.attrib['dir'])
		if self.node.attrib['dir']=="default_home":
			path=os.environ['HOME'] #defaults to home directory
		else:
			path=self.node.attrib['dir']
		qdir=QtCore.QDir(path)
		dir_list=qdir.entryInfoList()
		#remove children
		children=self.node.getchildren() 
		for child in children:
			self.node.remove(child)
		
		#add children
		for item in dir_list:
			if item.fileName()!='.':
				child = etree.SubElement(self.node,"button")
				child.attrib['name']=item.fileName()
				
				if item.isDir(): #this is a dir
					child.attrib['type']='directory'
					if item.fileName()=='..':
						child.attrib['icon']='go-up'
					else:
						child.attrib['icon']='folder'
				elif item.suffix=='':
					child.attrib['icon']='text-x-generic'
				else:
					child.attrib['type']='file'
					child.attrib['suffix']=item.suffix()
					if child.attrib['suffix'] in self.parent.supported_image_formats:
						child.attrib['icon']='thumbnail'
					else:
						try:
							child.attrib['icon']=self.parent.file_icons_dict[item.suffix()]
						except (KeyError):
							print('trying to find an icon...')
							try: 
								output = subprocess.Popen('xdg-mime query filetype "'+item.filePath()+'"',shell=True, 
										stdout=subprocess.PIPE).communicate()[0].decode('UTF-8').rstrip("\n")
								print(output)
								default = subprocess.Popen('xdg-mime query default ' + output,shell=True, 
										stdout=subprocess.PIPE).communicate()[0].decode('UTF-8').rstrip('\n')
								child.attrib['icon']=self.parent.layouts.icon_dict[default]
								self.parent.file_icons_dict[item.suffix()]=self.parent.layouts.icon_dict[default] #this is going to cause problems when the default application changes but fuck it
							except:
								child.attrib['icon']='text-x-generic'
								self.parent.file_icons_dict[item.suffix()]='test-x-generic'
				child.attrib['dir']=item.filePath()
				child.attrib['tool_tip']=item.filePath()
		self.group.change_menu(self.node)
	def act_x(self):
		print("undefined action")
	
class action_file():
	def __init__(self,btn):
		self.name='file'
		self.node=btn.node
		self.group=btn.group
		self.parent=btn.parent		
	def act_a(self):	
		print('opening file '+self.node.attrib['dir'])
		app=launch_application('xdg-open "'+self.node.attrib['dir']+'"',self.parent)
	def act_x(self):
		#a menu for handling x-click on file will go here
		root=self.node
		children=root.getchildren()
		for child in children: #this is inefficient maybe?
			self.node.remove(child)
		print('nothing here yet...')
class action_desktop():
	def __init__(self,btn):
		self.name='desktop'
		self.node=btn.node
		self.group=btn.group
		self.parent=btn.parent		
	def act_a(self):	
		self.parent.applications_mode()
	def act_x(self):
		print("undefined action")
class action_menu():
	def __init__(self,btn):
		self.name='menu'
		self.node=btn.node
		self.group=btn.group
		self.parent=btn.parent		
	def act_a(self):	
		if self.node.attrib['name']=="Favorites":
			#remove favorites
			children=self.node.getchildren() 
			for child in children:
				self.node.remove(child)
			#add favorites
			children=self.parent.layouts.tree.findall('.//button[@is_favorite="1"]')
			for child in children:
				child = etree.SubElement(self.node, "button",attrib=child.attrib)
		self.group.change_menu(self.node)
	def act_x(self):
		print("undefined action")
class action_application():
	def __init__(self,btn):
		self.name='application'
		self.node=btn.node
		self.group=btn.group
		self.parent=btn.parent		
	def act_a(self):			
		app=launch_application(self.node.attrib['exec'],self.parent)
		if self.node.attrib['use_controller']=="0":
			self.parent.applications_mode_no_controller()
		else:
			self.parent.applications_mode()
	def act_x(self):
		root=self.node
		# add or remove favorite button
		children=root.getchildren()
		if children==[]: #check to see if child has already been created
			#if not, create child
			child_fav = etree.SubElement(root, "button")
			child_control = etree.SubElement(root, "button")
			if root.attrib['is_favorite']=="0":
				child_fav.attrib['icon']="tab-new"
			else:
				child_fav.attrib['icon']="list-remove"
			if root.attrib['use_controller']=="0":
				child_control.attrib['icon']="applications-games"
			else:
				child_control.attrib['icon']="input-gaming"
		else:
			#children already present, use existing child node
			for child in children:
				if "favorites" in child.attrib['name'].lower():
					child_fav=child #choose favorite child
				if "controller" in child.attrib['name'].lower():
					child_control=child
		if root.attrib['is_favorite']=="1":
			child_fav.attrib['name']="remove from favorites"
		else:
			child_fav.attrib['name']="add to favorites"
		if root.attrib['use_controller']=="1":
			child_control.attrib['name']="disable controller"
		else:
			child_control.attrib['name']="enable controller"
		child_fav.attrib['type']="a_r_favorites"
		child_control.attrib['type']="set_controller_scheme"
		#done with children, change mode
		self.group.change_menu(self.node)
class action_setting():
	def __init__(self,btn):
		self.name='setting'
		self.node=btn.node
		self.group=btn.group
		self.parent=btn.parent		
	def act_a(self):
		print(self.node.attrib['name'])
		parent_node = self.node.getparent()
		if self.node.attrib['name']=="Raise Volume":
			pyamixer.increase('Master',5)
			parent_node.attrib['value']=str(pyamixer.get_level('Master'))
		elif self.node.attrib['name']=="Lower Volume":
			pyamixer.decrease('Master',5)
			parent_node.attrib['value']=str(pyamixer.get_level('Master'))
			
		else:
			parent_node.attrib['value']=self.node.attrib['value']
		self.group.change_menu(parent_node)
	def act_x(self):
		print("undefined action")	
class action_a_r_favorites():
	def __init__(self,btn):
		self.name='a_r_favorites'
		self.node=btn.node
		self.group=btn.group
		self.parent=btn.parent		
	def act_a(self):		
		parent_node = self.node.getparent()
		parent_node.attrib['is_favorite']=str(1-int(parent_node.attrib['is_favorite']))
		print(parent_node.attrib)
		if parent_node.attrib['is_favorite']=="1":
			self.node.attrib['name']="remove from favorites"
			self.node.attrib['icon']="list-remove"
		else:
			self.node.attrib['name']="add to favorites"
			self.node.attrib['icon']="tab-new"
		self.group.change_menu(parent_node)
	def act_x(self):
		print("undefined action")
class action_set_controller_scheme():
	def __init__(self,btn):
		self.name='set_controller_scheme'
		self.node=btn.node
		self.group=btn.group
		self.parent=btn.parent		
	def act_a(self):		
		parent_node = self.node.getparent()
		parent_node.attrib['use_controller']=str(1-int(parent_node.attrib['use_controller']))
		print(parent_node.attrib)
		if parent_node.attrib['use_controller']=="1":
			self.node.attrib['name']="disable controller"
			self.node.attrib['icon']="input-gaming"
		else:
			self.node.attrib['name']="enable controller"
			self.node.attrib['icon']="applications-games"
		self.group.change_menu(parent_node)
	def act_x(self):
		print("undefined action")
class action_running_apps():
	def __init__(self,btn):
		self.name='running_apps'
		self.node=btn.node
		self.group=btn.group
		self.parent=btn.parent		
	def act_a(self):			
		#previous running applications
		children=self.node.getchildren()
		for child in children:
			self.node.remove(child)
		running_apps=pywmctrl.get_running_applications()
		for app in running_apps:
			child=etree.SubElement(self.node, "button")
			child.attrib['wmctrl_id']=app[0]
			child.attrib['wmctrl_desktop']=app[1]
			child.attrib['pid']=app[2]
			output = subprocess.Popen("ps -q "+str(app[2])+" -o comm=", shell=True, stdout=subprocess.PIPE).communicate()[0].decode("utf-8").split("\n")
			pid_name=output[0]#[1].split()[-1]
			child.attrib['name']=pid_name
			child.attrib['tool_tip']="a: switch to application\nx: more..."
			print(pid_name)
			try:
				child.attrib['icon']=self.parent.layouts.icon_dict[pid_name]
			except(KeyError):
				child.attrib['icon']="other"
			child.attrib['type']='running_app'
		self.group.change_menu(self.node)
	def act_x(self):
		print("undefined action")
class action_running_app():
	def __init__(self,btn):
		self.name='running_app'
		self.node=btn.node
		self.group=btn.group
		self.parent=btn.parent		
	def act_a(self):		
		pywmctrl.switch_to_running_app(self.node.attrib['wmctrl_id'])
		self.parent.applications_mode()
	def act_x(self):
		root=self.node
		children=root.getchildren()
		for child in children: #this is inefficient maybe?
			self.node.remove(child)
		#add close application button
		child = etree.SubElement(root, "button")
		#child.attrib=self.node.attrib
		child.attrib['name']="close"
		child.attrib['wmctrl_id']=self.node.attrib['wmctrl_id']
		child.attrib['icon']="process-stop"
		child.attrib['type']="close_running_app"
		self.group.change_menu(self.node)
		
class action_close_running_app():
	def __init__(self,btn):
		self.name='close_running_app'
		self.node=btn.node
		self.group=btn.group
		self.parent=btn.parent	
	def act_a(self):		
		pywmctrl.close_running_app(self.node.attrib['wmctrl_id'])
		self.group.change_menu()
	def act_x(self):
		print("undefined action")
class action_undefined_action():
	def __init__(self,btn):
		self.name='undefined_action'
	def act_a(self):		
		print("undefined action")
	def act_x(self):
		print("undefined action")

class launch_application(QtCore.QThread):
	# this class launches applications in a thread
	def __init__(self,application, parent=None):
		QtCore.QThread.__init__(self, parent)
		self.parent=parent
		self.application=application
		self.exiting = False
		self.start()
		self.finished.connect(self.app_finished)
	def run(self):
		#clean up workspaces
		#shouldn't need to do this but doing it anyway
		pywmctrl.cleanup()
		#create new workspace
		pywmctrl.create_and_switch()
		#launch application
		process=subprocess.Popen(self.application,shell=True)
		process.wait()
		#app_finished runs after process is done
	def app_finished(self):
		#if the program was launched by this application, the following code is executed after the program finishes
		#cleanup up unused workspaces
		pywmctrl.cleanup()
		#switch back to applications mode, this should be more sophisticated
		print(self.application+ " is done")
		self.parent.applications_mode() #return to controller application mode
		
